#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
EXERC√çCIOS PR√ÅTICOS: FastAPI - Aplicando o Conhecimento

Este arquivo cont√©m exerc√≠cios pr√°ticos para consolidar o aprendizado do FastAPI.
Complete cada exerc√≠cio para dominar os conceitos apresentados.

Autor: LabExtracaoAnalise2025
Data: 2025
"""

"""
EXERC√çCIO 1: API de Livros
=======================

Crie uma API para gerenciar uma biblioteca de livros com os seguintes endpoints:

1. GET /livros - Listar todos os livros
2. GET /livros/{id} - Obter livro espec√≠fico
3. POST /livros - Adicionar novo livro
4. PUT /livros/{id} - Atualizar livro
5. DELETE /livros/{id} - Remover livro
6. GET /livros/buscar?q={termo} - Buscar livros por termo
7. GET /livros/autor/{autor} - Listar livros por autor
8. GET /livros/estatisticas - Estat√≠sticas da biblioteca

Modelo de Livro:
- id: int (autom√°tico)
- titulo: str (obrigat√≥rio, 1-200 chars)
- autor: str (obrigat√≥rio, 1-100 chars)
- ano: int (opcional, 1800-2025)
- genero: str (obrigat√≥rio, escolha: romance, ficcao, nao-ficcao, biografia)
- paginas: int (opcional, >0)
- disponivel: bool (padrao: True)

Valida√ß√µes:
- Ano deve estar entre 1800 e 2025
- P√°ginas deve ser maior que 0
- G√™nero deve ser um dos valores permitidos
- T√≠tulo e autor s√£o obrigat√≥rios

Funcionalidades:
- Busca por termo no t√≠tulo ou autor
- Filtros por g√™nero e disponibilidade
- Estat√≠sticas (total, por g√™nero, dispon√≠veis)
- Pagina√ß√£o na listagem principal
"""

"""
EXERC√çCIO 2: Sistema de Avalia√ß√µes
===============================

Crie uma API para um sistema de avalia√ß√µes de produtos com:

1. GET /produtos - Listar produtos
2. POST /produtos - Adicionar produto
3. GET /produtos/{id} - Obter produto
4. POST /produtos/{id}/avaliacoes - Adicionar avalia√ß√£o
5. GET /produtos/{id}/avaliacoes - Listar avalia√ß√µes
6. GET /produtos/{id}/estatisticas - Estat√≠sticas do produto

Modelos:
Produto:
- id: int
- nome: str
- descricao: str
- preco: float
- categoria: str

Avaliacao:
- id: int
- produto_id: int
- usuario: str
- nota: int (1-5)
- comentario: str (opcional)
- data: datetime

Valida√ß√µes:
- Nota deve estar entre 1 e 5
- Usu√°rio √© obrigat√≥rio
- Produto deve existir

Funcionalidades:
- Calcular nota m√©dia por produto
- Contar total de avalia√ß√µes
- Filtrar por nota m√≠nima
- Ordenar por data ou nota
"""

"""
EXERC√çCIO 3: API de Eventos
========================

Crie uma API para gerenciar eventos com:

1. GET /eventos - Listar eventos
2. POST /eventos - Criar evento
3. GET /eventos/{id} - Obter evento
4. PUT /eventos/{id} - Atualizar evento
5. DELETE /eventos/{id} - Remover evento
6. POST /eventos/{id}/inscricoes - Inscrever participante
7. GET /eventos/{id}/participantes - Listar participantes
8. GET /eventos/proximos - Eventos futuros
9. GET /eventos/estatisticas - Estat√≠sticas gerais

Modelos:
Evento:
- id: int
- titulo: str
- descricao: str
- data_inicio: datetime
- data_fim: datetime
- local: str
- capacidade: int
- preco: float
- categoria: str

Inscricao:
- id: int
- evento_id: int
- nome: str
- email: str
- telefone: str (opcional)
- data_inscricao: datetime

Valida√ß√µes:
- Data fim deve ser depois da data in√≠cio
- Capacidade deve ser > 0
- Pre√ßo deve ser >= 0
- Email deve ser v√°lido
- N√£o permitir inscri√ß√µes duplicadas por email

Funcionalidades:
- Filtrar eventos por data
- Verificar disponibilidade
- Calcular ocupa√ß√£o
- Estat√≠sticas por categoria
"""

"""
EXERC√çCIO 4: Sistema de Autentica√ß√£o
================================

Implemente um sistema de autentica√ß√£o completo:

1. POST /auth/registrar - Registrar usu√°rio
2. POST /auth/login - Fazer login
3. POST /auth/logout - Fazer logout
4. GET /auth/perfil - Obter perfil do usu√°rio
5. PUT /auth/perfil - Atualizar perfil
6. POST /auth/alterar-senha - Alterar senha

Modelos:
Usuario:
- id: int
- nome: str
- email: str (√∫nico)
- senha_hash: str
- data_criacao: datetime
- ativo: bool

LoginRequest:
- email: str
- senha: str

RegistroRequest:
- nome: str
- email: str
- senha: str
- confirmar_senha: str

Valida√ß√µes:
- Email deve ser √∫nico
- Senha deve ter pelo menos 8 caracteres
- Senhas devem coincidir no registro
- Email deve ser v√°lido

Funcionalidades:
- Hash de senha com bcrypt
- Tokens JWT para sess√£o
- Middleware de autentica√ß√£o
- Prote√ß√£o de rotas
- Valida√ß√£o de token
"""

"""
EXERC√çCIO 5: API com Middleware e Tratamento de Erros
===============================================

Crie uma API que demonstre:

1. Middleware personalizado para logging
2. Tratamento de erros customizado
3. Valida√ß√£o de rate limiting
4. Headers de seguran√ßa
5. Compress√£o de resposta
6. Cache simples

Funcionalidades:
- Log de todas as requisi√ß√µes com timestamp
- Contador de requisi√ß√µes por IP
- Rate limiting (m√°ximo 100 req/min por IP)
- Headers de seguran√ßa (X-Content-Type-Options, X-Frame-Options)
- Compress√£o gzip para respostas grandes
- Cache em mem√≥ria para respostas frequentes
- Tratamento personalizado de erros 404, 500
- Health check com m√©tricas

Endpoints:
- GET / - Informa√ß√µes da API
- GET /teste - Endpoint de teste
- GET /cache-test - Teste de cache
- GET /health - Status e m√©tricas
- GET /stats - Estat√≠sticas de uso
"""

"""
EXERC√çCIO 6: API com Upload de Arquivos
===================================

Crie uma API para upload e gerenciamento de arquivos:

1. POST /upload - Upload de arquivo
2. GET /arquivos - Listar arquivos
3. GET /arquivos/{id} - Download de arquivo
4. DELETE /arquivos/{id} - Remover arquivo
5. GET /arquivos/{id}/info - Informa√ß√µes do arquivo
6. POST /arquivos/{id}/compartilhar - Compartilhar arquivo

Modelos:
Arquivo:
- id: int
- nome_original: str
- nome_arquivo: str
- tamanho: int
- tipo_mime: str
- data_upload: datetime
- usuario_id: int
- publico: bool

Valida√ß√µes:
- Tamanho m√°ximo: 10MB
- Tipos permitidos: pdf, doc, docx, txt, jpg, png
- Nome do arquivo n√£o pode estar vazio

Funcionalidades:
- Armazenamento local de arquivos
- Gera√ß√£o de nomes √∫nicos
- Verifica√ß√£o de tipo MIME
- Compress√£o de imagens
- Gera√ß√£o de thumbnails
- Controle de acesso
- Estat√≠sticas de uso
"""

"""
DICAS PARA OS EXERC√çCIOS:
========================

1. Comece sempre pelos modelos Pydantic
2. Implemente valida√ß√µes robustas
3. Use tipos apropriados para cada campo
4. Documente bem todos os endpoints
5. Implemente tratamento de erros
6. Teste todos os cen√°rios
7. Use a documenta√ß√£o autom√°tica (/docs)
8. Implemente filtros e pagina√ß√£o
9. Adicione estat√≠sticas √∫teis
10. Mantenha o c√≥digo organizado e limpo

BONUS:
======
- Adicione testes unit√°rios
- Implemente valida√ß√£o de dados mais avan√ßada
- Adicione cache Redis
- Implemente busca full-text
- Adicione autentica√ß√£o OAuth2
- Implemente WebSockets para tempo real
- Adicione monitoramento com Prometheus
- Implemente backup autom√°tico
- Adicione sistema de notifica√ß√µes
- Implemente API versioning
"""

if __name__ == "__main__":
    print("üìö EXERC√çCIOS PR√ÅTICOS - FASTAPI")
    print("=" * 50)
    print("Complete cada exerc√≠cio para dominar o FastAPI!")
    print("\nExerc√≠cios dispon√≠veis:")
    print("1. API de Livros")
    print("2. Sistema de Avalia√ß√µes")
    print("3. API de Eventos")
    print("4. Sistema de Autentica√ß√£o")
    print("5. API com Middleware e Tratamento de Erros")
    print("6. API com Upload de Arquivos")
    print("\nüí° Dica: Comece pelo exerc√≠cio 1 e avance gradualmente!")
    print("üöÄ Use a documenta√ß√£o autom√°tica para testar suas APIs!")









